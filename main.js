// Generated by psc-bundle 0.7.6.1
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Monoid ---------------------------------------------------------------------

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  //- Semiring -------------------------------------------------------------------

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };

  //- Bounded --------------------------------------------------------------------

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;            

  //- BooleanAlgebra -------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var ModuloSemiring = function (__superclass_Prelude$dotSemiring_0, div, mod) {
      this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
      this.div = div;
      this.mod = mod;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };
  var Show = function (show) {
      this.show = show;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                           
  var unit = {};
  var top = function (dict) {
      return dict.top;
  }; 
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);  
  var showBoolean = new Show(function (_35) {
      if (_35) {
          return "true";
      };
      if (!_35) {
          return "false";
      };
      throw new Error("Failed pattern match at Prelude line 841, column 1 - line 845, column 1: " + [ _35.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (__dict_Show_1) {
      return new Show($foreign.showArrayImpl(show(__dict_Show_1)));
  };             
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (__dict_Applicative_2) {
      return pure(__dict_Applicative_2);
  };
  var otherwise = true;
  var one = function (dict) {
      return dict.one;
  };
  var not = function (dict) {
      return dict.not;
  };
  var mul = function (dict) {
      return dict.mul;
  }; 
  var moduloSemiringNumber = new ModuloSemiring(function () {
      return semiringNumber;
  }, $foreign.numDiv, function (_14) {
      return function (_15) {
          return 0.0;
      };
  });                                  
  var mod = function (dict) {
      return dict.mod;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (__dict_Functor_5) {
      return map(__dict_Functor_5);
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  }; 
  var div = function (dict) {
      return dict.div;
  };
  var $div = function (__dict_ModuloSemiring_10) {
      return div(__dict_ModuloSemiring_10);
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var $$const = function (a) {
      return function (_3) {
          return a;
      };
  };
  var $$void = function (__dict_Functor_12) {
      return function (fa) {
          return $less$dollar$greater(__dict_Functor_12)($$const(unit))(fa);
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var $amp$amp = function (__dict_BooleanAlgebra_13) {
      return conj(__dict_BooleanAlgebra_13);
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var $greater$greater$greater = function (__dict_Semigroupoid_15) {
      return flip(compose(__dict_Semigroupoid_15));
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
  var boundedBoolean = new Bounded(false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var bind = function (dict) {
      return dict.bind;
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (__dict_Apply_25) {
      return apply(__dict_Apply_25);
  };
  var liftA1 = function (__dict_Applicative_26) {
      return function (f) {
          return function (a) {
              return $less$times$greater(__dict_Applicative_26["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_26)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (__dict_Semigroup_28) {
      return append(__dict_Semigroup_28);
  };
  var ap = function (__dict_Monad_30) {
      return function (f) {
          return function (a) {
              return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                  return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                      return $$return(__dict_Monad_30["__superclass_Prelude.Applicative_0"]())(_2(_1));
                  });
              });
          };
      };
  }; 
  var add = function (dict) {
      return dict.add;
  };
  var $plus = function (__dict_Semiring_31) {
      return add(__dict_Semiring_31);
  };
  exports["Show"] = Show;
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["Bounded"] = Bounded;
  exports["ModuloSemiring"] = ModuloSemiring;
  exports["Semiring"] = Semiring;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["&&"] = $amp$amp;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["/"] = $div;
  exports["mod"] = mod;
  exports["div"] = div;
  exports["+"] = $plus;
  exports["one"] = one;
  exports["mul"] = mul;
  exports["zero"] = zero;
  exports["add"] = add;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["void"] = $$void;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports[">>>"] = $greater$greater$greater;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorArray"] = functorArray;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
  exports["moduloSemiringNumber"] = moduloSemiringNumber;
  exports["boundedBoolean"] = boundedBoolean;
  exports["boundedInt"] = boundedInt;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showArray"] = showArray;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];     
  var Alt = function (__superclass_Prelude$dotFunctor_0, alt) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.alt = alt;
  };                                         
  var alt = function (dict) {
      return dict.alt;
  };
  var $less$bar$greater = function (__dict_Alt_0) {
      return alt(__dict_Alt_0);
  };
  exports["Alt"] = Alt;
  exports["<|>"] = $less$bar$greater;
  exports["alt"] = alt;;
 
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var $times$greater = function (__dict_Apply_1) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](__dict_Apply_1)(Prelude["<$>"](__dict_Apply_1["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (__dict_Apply_5) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return Prelude["<*>"](__dict_Apply_5)(Prelude["<$>"](__dict_Apply_5["__superclass_Prelude.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["lift2"] = lift2;
  exports["*>"] = $times$greater;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];     
  var when = function (__dict_Monad_0) {
      return function (_0) {
          return function (m) {
              if (_0) {
                  return m;
              };
              if (!_0) {
                  return Prelude["return"](__dict_Monad_0["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
              };
              throw new Error("Failed pattern match at Control.Monad line 8, column 1 - line 9, column 1: " + [ _0.constructor.name, m.constructor.name ]);
          };
      };
  };
  exports["when"] = when;;
 
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      for (var i = start, n = 0; i !== end; i += step) {
        result[n++] = i;
      }
      result[n] = i;
      return result;
    };
  };

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];     
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };               
  var monoidString = new Monoid(function () {
      return Prelude.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();                                             
  var functorMaybe = new Prelude.Functor(function (fn) {
      return function (_2) {
          if (_2 instanceof Just) {
              return new Just(fn(_2.value0));
          };
          return Nothing.value;
      };
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (_4) {
      return function (r) {
          if (_4 instanceof Nothing) {
              return r;
          };
          return _4;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["functorMaybe"] = functorMaybe;
  exports["altMaybe"] = altMaybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (__dict_Applicative_0) {
      return function (__dict_Foldable_1) {
          return function (f) {
              return foldr(__dict_Foldable_1)(function (_97) {
                  return Control_Apply["*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]())(f(_97));
              })(Prelude.pure(__dict_Applicative_0)(Prelude.unit));
          };
      };
  };
  var for_ = function (__dict_Applicative_2) {
      return function (__dict_Foldable_3) {
          return Prelude.flip(traverse_(__dict_Applicative_2)(__dict_Foldable_3));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (__dict_Foldable_6) {
      return function (__dict_Monoid_7) {
          return function (sep) {
              return function (xs) {
                  var go = function (_24) {
                      return function (x) {
                          if (_24.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(_24.acc)(Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(__dict_Foldable_6)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(__dict_Monoid_7)
                  })(xs)).acc;
              };
          };
      };
  };
  var sum = function (__dict_Foldable_12) {
      return function (__dict_Semiring_13) {
          return foldl(__dict_Foldable_12)(Prelude["+"](__dict_Semiring_13))(Prelude.zero(__dict_Semiring_13));
      };
  }; 
  var foldableMaybe = new Foldable(function (__dict_Monoid_15) {
      return function (f) {
          return function (_2) {
              if (_2 instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(__dict_Monoid_15);
              };
              if (_2 instanceof Data_Maybe.Just) {
                  return f(_2.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 99, column 1 - line 107, column 1: " + [ f.constructor.name, _2.constructor.name ]);
          };
      };
  }, function (f) {
      return function (z) {
          return function (_1) {
              if (_1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (_1 instanceof Data_Maybe.Just) {
                  return f(z)(_1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 99, column 1 - line 107, column 1: " + [ f.constructor.name, z.constructor.name, _1.constructor.name ]);
          };
      };
  }, function (f) {
      return function (z) {
          return function (_0) {
              if (_0 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (_0 instanceof Data_Maybe.Just) {
                  return f(_0.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 99, column 1 - line 107, column 1: " + [ f.constructor.name, z.constructor.name, _0.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (__dict_Foldable_20) {
      return function (__dict_Monoid_21) {
          return function (f) {
              return function (xs) {
                  return foldr(__dict_Foldable_20)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](__dict_Monoid_21["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(__dict_Monoid_21))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (__dict_Monoid_22) {
      return foldMapDefaultR(foldableArray)(__dict_Monoid_22);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (__dict_Foldable_29) {
      return function (__dict_Monoid_30) {
          return foldMap(__dict_Foldable_29)(__dict_Monoid_30)(Prelude.id(Prelude.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["sum"] = sum;
  exports["intercalate"] = intercalate;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["fold"] = fold;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Traversable

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont (fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList (x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray (list) {
      var arr = [];
      while (list !== emptyList) {
        arr.push(list.head);
        list = list.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (__dict_Traversable_12) {
      return function (__dict_Applicative_13) {
          return function (tma) {
              return traverse(__dict_Traversable_12)(__dict_Applicative_13)(Prelude.id(Prelude.categoryFn))(tma);
          };
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Prelude.functorArray;
  }, function (__dict_Applicative_15) {
      return sequenceDefault(traversableArray)(__dict_Applicative_15);
  }, function (__dict_Applicative_14) {
      return $foreign.traverseArrayImpl(Prelude.apply(__dict_Applicative_14["__superclass_Prelude.Apply_0"]()))(Prelude.map((__dict_Applicative_14["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Prelude.pure(__dict_Applicative_14));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["sequenceDefault"] = sequenceDefault;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;;
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $dot$dot = $foreign.range;
  exports[".."] = $dot$dot;
  exports["zipWith"] = $foreign.zipWith;
  exports["cons"] = $foreign.cons;
  exports["length"] = $foreign.length;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.toNumber = function (n) {
    return n;
  };
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Math

  exports.abs = Math.abs;  

  exports.cos = Math.cos;

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports["%"] = function(n) {
    return function(m) {
      return n % m;
    };
  };                           

  exports.pi = Math.PI;      
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Math"];
  exports["pi"] = $foreign.pi;
  exports["%"] = $foreign["%"];
  exports["pow"] = $foreign.pow;
  exports["cos"] = $foreign.cos;
  exports["abs"] = $foreign.abs;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];
  exports["toNumber"] = $foreign.toNumber;;
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var toList = function (__dict_Foldable_2) {
      return Data_Foldable.foldr(__dict_Foldable_2)(Cons.create)(Nil.value);
  };
  var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_16) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function (_319) {
                  return Prelude.append(__dict_Monoid_16["__superclass_Prelude.Semigroup_0"]())(acc)(f(_319));
              };
          })(Data_Monoid.mempty(__dict_Monoid_16));
      };
  }, (function () {
      var go = function (__copy_o) {
          return function (__copy_b) {
              return function (__copy__66) {
                  var o = __copy_o;
                  var b = __copy_b;
                  var _66 = __copy__66;
                  tco: while (true) {
                      var b_1 = b;
                      if (_66 instanceof Nil) {
                          return b_1;
                      };
                      if (_66 instanceof Cons) {
                          var __tco_o = o;
                          var __tco_b = o(b)(_66.value0);
                          var __tco__66 = _66.value1;
                          o = __tco_o;
                          b = __tco_b;
                          _66 = __tco__66;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _66.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (o) {
      return function (b) {
          return function (_65) {
              if (_65 instanceof Nil) {
                  return b;
              };
              if (_65 instanceof Cons) {
                  return o(_65.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_65.value1));
              };
              throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _65.constructor.name ]);
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["toList"] = toList;
  exports["foldableList"] = foldableList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // module Flare
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.renderString = function(target) {
    return function(content) {
      return function() {
        document.getElementById(target).innerHTML = content;
      };
    };
  };

  exports.removeChildren = function(target) {
    return function() {
      var el = document.getElementById(target);

      // http://stackoverflow.com/a/3955238/704831
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
  };

  exports.appendComponent = function(target) {
    return function(el) {
      return function() {
        document.getElementById(target).appendChild(el);
      };
    };
  };

  function createComponent(inputType, elementCallback, eventType, eventListener) {
    return function(id) {
      return function(initial) {
        return function(send) {
          return function() {
            var el = elementCallback(initial);
            el.className = "flare-input-" + inputType;

            var div = document.createElement("div");
            div.className = "flare-input";

            if (id !== "") {
              el.id = id;
              var label = document.createElement("label");
              label.htmlFor = id;
              label.appendChild(document.createTextNode(id));
              div.appendChild(label);
            }

            div.appendChild(el);

            el.addEventListener(eventType, function(e) {
              var value = eventListener(e.target, initial);
              send(value)();
            });

            return div;
          };
        };
      };
    };
  }

  exports.cNumber = createComponent("number",
    function(initial) {
      var input = document.createElement("input");
      input.type = "number";
      input.step = "any";
      input.value = initial.toString();
      return input;
    },
    "input",
    function(t, initial) {
      var val = parseFloat(t.value);
      return (isNaN(val) ? initial : val);
    }
  );

  function clamp(min, max, initial, value) {
    if (isNaN(value)) {
      return initial;
    } else if (value < min) {
      return min;
    } else if (value > max) {
      return max;
    }
    return value;
  }

  exports.cNumberRange = function(type) {
    return function(min) {
      return function(max) {
        return function(step) {
          return createComponent("number-" + type,
            function(initial) {
              var input = document.createElement("input");
              input.type = type;
              input.min = min.toString();
              input.max = max.toString();
              input.step = step.toString();
              input.value = initial.toString();
              return input;
            },
            "input",
            function(t, initial) {
              return clamp(min, max, initial, parseFloat(t.value));
            }
          );
        };
      };
    };
  };

  exports.cIntRange = function(type) {
    return function(min) {
      return function(max) {
        return createComponent("int-" + type,
          function(initial) {
            var input = document.createElement("input");
            input.type = type;
            input.min = min.toString();
            input.max = max.toString();
            input.step = "1";
            input.value = initial.toString();
            return input;
          },
          "input",
          function(t, initial) {
            return clamp(min, max, initial, parseInt(t.value, 10));
          }
        );
      };
    };
  };

  exports.cString = createComponent("string",
    function(initial) {
      var input = document.createElement("input");
      input.type = "text";
      input.value = initial;
      return input;
    },
    "input",
    function(t, initial) {
      return t.value;
    }
  );

  exports.cBoolean = createComponent("boolean",
    function(initial) {
      var input = document.createElement("input");
      input.type = "checkbox";
      input.checked = initial;
      return input;
    },
    "change",
    function(t, initial) {
      return t.checked;
    }
  );

  exports.cButton = function(label) {
    return function(initial) {
      return function(send) {
        return function() {
          var div = document.createElement("div");
          div.className = "flare-input";

          var button = document.createElement("button");
          button.id = label;
          button.className = "flare-input-button";
          button.appendChild(document.createTextNode(label));

          button.addEventListener('mousedown', function() {
            send(true)();
          });
          button.addEventListener('mouseup', function() {
            send(false)();
          });

          div.appendChild(button);
          return div;

        };
      };
    };
  };

  exports.cSelect = function(showX) {
    return function(xs) {
      return createComponent("select",
        function(initial) {
          var select = document.createElement("select");

          var x, op;
          for (var i = 0; i < xs.length + 1; i++) {
            x = (i === 0) ? initial : xs[i - 1];
            op = document.createElement("option");
            op.appendChild(document.createTextNode(showX.show(x)));
            select.appendChild(op);
          }

          return select;
        },
        "change",
        function(t, initial) {
          var ix = t.selectedIndex;
          if (ix === 0) {
            return initial;
          }
          return xs[ix - 1];
        }
      );
    };
  };

  // vim: ts=2:sw=2
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };


  exports.applySigP =
    function applySigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun.get()(sig.get()));
          var produce = function() { out.set(fun.get()(sig.get())); };
          fun.subscribe(produce);
          sig.subscribe(produce);
          return out;
        };
      };
    };

  exports.foldpP =
    function foldpP(constant) {
      return function(fun) {
        return function(seed) {
          return function(sig) {
            var acc = seed;
            var out = constant(acc);
            sig.subscribe(function(val) {
              acc = fun(val)(acc);
              out.set(acc);
            });
            return out;
          };
        };
      };
    };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];                 
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var foldp = $foreign.foldpP($foreign.constant);
  var applySig = $foreign.applySigP($foreign.constant);
  var applySignal = new Prelude.Apply(function () {
      return functorSignal;
  }, applySig);
  var applicativeSignal = new Prelude.Applicative(function () {
      return applySignal;
  }, $foreign.constant);
  exports["foldp"] = foldp;
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["applicativeSignal"] = applicativeSignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan, v) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];     
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["send"] = send;
  exports["channel"] = channel;
  exports["subscribe"] = $foreign.subscribe;;
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Flare"];
  var Prelude = PS["Prelude"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];     
  var Flare = (function () {
      function Flare(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Flare.create = function (value0) {
          return function (value1) {
              return new Flare(value0, value1);
          };
      };
      return Flare;
  })();
  var UI = function (x) {
      return x;
  };
  var runFlareWith = function (controls) {
      return function (handler) {
          return function (_6) {
              return function __do() {
                  var _4 = _6();
                  $foreign.removeChildren(controls)();
                  Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)($foreign.appendComponent(controls))(_4.value0)();
                  return Signal.runSignal(Prelude.map(Signal.functorSignal)(handler)(_4.value1))();
              };
          };
      };
  };
  var runFlareS = function (controls) {
      return function (target) {
          return runFlareWith(controls)($foreign.renderString(target));
      };
  };
  var runFlare = function (__dict_Show_2) {
      return function (controls) {
          return function (target) {
              return runFlareWith(controls)(Prelude[">>>"](Prelude.semigroupoidFn)(Prelude.show(__dict_Show_2))($foreign.renderString(target)));
          };
      };
  };
  var lift = function (msig) {
      return UI(function __do() {
          var _0 = msig();
          return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare([  ], _0))();
      });
  };
  var functorFlare = new Prelude.Functor(function (f) {
      return function (_7) {
          return new Flare(_7.value0, Prelude.map(Signal.functorSignal)(f)(_7.value1));
      };
  });
  var functorUI = new Prelude.Functor(function (f) {
      return function (_10) {
          return UI(Prelude.map(Control_Monad_Eff.functorEff)(Prelude.map(functorFlare)(f))(_10));
      };
  });
  var foldp = function (f) {
      return function (x0) {
          return function (_5) {
              return UI(function __do() {
                  var _1 = _5();
                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare(_1.value0, Signal.foldp(f)(x0)(_1.value1)))();
              });
          };
      };
  };
  var createUI = function (createComp) {
      return function (id) {
          return function ($$default) {
              return UI(function __do() {
                  var _3 = Signal_Channel.channel($$default)();
                  var _2 = createComp(id)($$default)(Signal_Channel.send(_3))();
                  return (function () {
                      var signal = Signal_Channel.subscribe(_3);
                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare([ _2 ], signal));
                  })()();
              });
          };
      };
  };
  var $$int = function (id) {
      return createUI($foreign.cIntRange("number")(Prelude.bottom(Prelude.boundedInt))(Prelude.top(Prelude.boundedInt)))(id);
  };
  var int_ = $$int("");        
  var intSlider = function (id) {
      return function (min) {
          return function (max) {
              return function ($$default) {
                  return createUI($foreign.cIntRange("range")(min)(max))(id)($$default);
              };
          };
      };
  };
  var intSlider_ = intSlider("");
  var number = createUI($foreign.cNumber);
  var number_ = number("");          
  var numberSlider = function (id) {
      return function (min) {
          return function (max) {
              return function (step) {
                  return function ($$default) {
                      return createUI($foreign.cNumberRange("range")(min)(max)(step))(id)($$default);
                  };
              };
          };
      };
  };                                   
  var select = function (__dict_Show_8) {
      return function (id) {
          return function ($$default) {
              return function (xs) {
                  return createUI($foreign.cSelect(__dict_Show_8)(xs))(id)($$default);
              };
          };
      };
  };
  var string = createUI($foreign.cString);
  var string_ = string("");
  var button = function (id) {
      return createUI($foreign.cButton)(id)(false);
  };
  var $$boolean = createUI($foreign.cBoolean);
  var boolean_ = $$boolean("");
  var applyFlare = new Prelude.Apply(function () {
      return functorFlare;
  }, function (_8) {
      return function (_9) {
          return new Flare(Prelude["<>"](Prelude.semigroupArray)(_8.value0)(_9.value0), Prelude["<*>"](Signal.applySignal)(_8.value1)(_9.value1));
      };
  });
  var applyUI = new Prelude.Apply(function () {
      return functorUI;
  }, function (_11) {
      return function (_12) {
          return UI(Control_Apply.lift2(Control_Monad_Eff.applyEff)(Prelude.apply(applyFlare))(_11)(_12));
      };
  });
  var semigroupUI = function (__dict_Semigroup_1) {
      return new Prelude.Semigroup(Control_Apply.lift2(applyUI)(Prelude.append(__dict_Semigroup_1)));
  };
  var applicativeFlare = new Prelude.Applicative(function () {
      return applyFlare;
  }, function (x) {
      return new Flare([  ], Prelude.pure(Signal.applicativeSignal)(x));
  });
  var applicativeUI = new Prelude.Applicative(function () {
      return applyUI;
  }, function (x) {
      return UI(Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.pure(applicativeFlare)(x)));
  });
  var boundedUI = function (__dict_Bounded_10) {
      return new Prelude.Bounded(Prelude.pure(applicativeUI)(Prelude.bottom(__dict_Bounded_10)), Prelude.pure(applicativeUI)(Prelude.top(__dict_Bounded_10)));
  };
  var booleanAlgebraUI = function (__dict_BooleanAlgebra_11) {
      return new Prelude.BooleanAlgebra(function () {
          return boundedUI(__dict_BooleanAlgebra_11["__superclass_Prelude.Bounded_0"]());
      }, Control_Apply.lift2(applyUI)(Prelude.conj(__dict_BooleanAlgebra_11)), Control_Apply.lift2(applyUI)(Prelude.disj(__dict_BooleanAlgebra_11)), Prelude.map(functorUI)(Prelude.not(__dict_BooleanAlgebra_11)));
  };
  var semiringUI = function (__dict_Semiring_0) {
      return new Prelude.Semiring(Control_Apply.lift2(applyUI)(Prelude.add(__dict_Semiring_0)), Control_Apply.lift2(applyUI)(Prelude.mul(__dict_Semiring_0)), Prelude.pure(applicativeUI)(Prelude.one(__dict_Semiring_0)), Prelude.pure(applicativeUI)(Prelude.zero(__dict_Semiring_0)));
  };
  var moduloSemiringUI = function (__dict_ModuloSemiring_6) {
      return new Prelude.ModuloSemiring(function () {
          return semiringUI(__dict_ModuloSemiring_6["__superclass_Prelude.Semiring_0"]());
      }, Control_Apply.lift2(applyUI)(Prelude.div(__dict_ModuloSemiring_6)), Control_Apply.lift2(applyUI)(Prelude.mod(__dict_ModuloSemiring_6)));
  };
  exports["UI"] = UI;
  exports["Flare"] = Flare;
  exports["runFlareS"] = runFlareS;
  exports["runFlare"] = runFlare;
  exports["runFlareWith"] = runFlareWith;
  exports["select"] = select;
  exports["button"] = button;
  exports["boolean_"] = boolean_;
  exports["boolean"] = $$boolean;
  exports["string_"] = string_;
  exports["string"] = string;
  exports["intSlider_"] = intSlider_;
  exports["intSlider"] = intSlider;
  exports["int_"] = int_;
  exports["numberSlider"] = numberSlider;
  exports["number_"] = number_;
  exports["number"] = number;
  exports["foldp"] = foldp;
  exports["lift"] = lift;
  exports["functorFlare"] = functorFlare;
  exports["applyFlare"] = applyFlare;
  exports["applicativeFlare"] = applicativeFlare;
  exports["functorUI"] = functorUI;
  exports["applyUI"] = applyUI;
  exports["applicativeUI"] = applicativeUI;
  exports["semigroupUI"] = semigroupUI;
  exports["semiringUI"] = semiringUI;
  exports["moduloSemiringUI"] = moduloSemiringUI;
  exports["boundedUI"] = boundedUI;
  exports["booleanAlgebraUI"] = booleanAlgebraUI;;
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setLineWidth = function(width) {
      return function(ctx) {
          return function() {
              ctx.lineWidth = width;
              return ctx;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.setShadowColor = function(color) {
      return function(ctx) {
          return function() {
              ctx.shadowColor = color;
              return ctx;
          };
      };
  };

  exports.setShadowBlur = function(blur) {
      return function(ctx) {
          return function() {
              ctx.shadowBlur = blur;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetX = function(offsetX) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetX = offsetX;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetY = function(offsetY) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetY = offsetY;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.clip = function(ctx) {
      return function() {
          ctx.clip();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.scale = function(t) {
      return function(ctx) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
              return ctx;
          };
      };
  };

  exports.rotate = function(angle) {
      return function(ctx) {
          return function() {
              ctx.rotate(angle);
              return ctx;
          };
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };

 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              $foreign.save(ctx)();
              var _4 = action();
              $foreign.restore(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(_4)();
          };
      };
  };
  var strokePath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var _2 = path();
              $foreign.stroke(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(_2)();
          };
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var _3 = path();
              $foreign.fill(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(_3)();
          };
      };
  };
  exports["withContext"] = withContext;
  exports["fillPath"] = fillPath;
  exports["strokePath"] = strokePath;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["fillText"] = $foreign.fillText;
  exports["setFont"] = $foreign.setFont;
  exports["translate"] = $foreign.translate;
  exports["rotate"] = $foreign.rotate;
  exports["scale"] = $foreign.scale;
  exports["clearRect"] = $foreign.clearRect;
  exports["rect"] = $foreign.rect;
  exports["arc"] = $foreign.arc;
  exports["closePath"] = $foreign.closePath;
  exports["moveTo"] = $foreign.moveTo;
  exports["lineTo"] = $foreign.lineTo;
  exports["clip"] = $foreign.clip;
  exports["setShadowColor"] = $foreign.setShadowColor;
  exports["setShadowOffsetY"] = $foreign.setShadowOffsetY;
  exports["setShadowOffsetX"] = $foreign.setShadowOffsetX;
  exports["setShadowBlur"] = $foreign.setShadowBlur;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["getContext2D"] = $foreign.getContext2D;;
 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  "use strict";

  // module Graphics.Drawing.Color

  exports.byteToHex = function(n) {
    
      var s = (n = Math.min(255, Math.max(n, 0)) | 0).toString(16);
      return n >= 16 ? s : "0" + s;
  };
})(PS["Graphics.Drawing.Color"] = PS["Graphics.Drawing.Color"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Graphics.Drawing.Color"];
  var Prelude = PS["Prelude"];
  var $$Math = PS["Math"];     
  var Color = (function () {
      function Color(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Color.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Color(value0, value1, value2);
              };
          };
      };
      return Color;
  })();
  var rgb = Color.create;
  var hsl = function (h) {
      return function (s) {
          return function (l) {
              var h$prime = h / 60.0;
              var chr = (1.0 - $$Math.abs(2.0 * l - 1.0)) * s;
              var m = l - chr / 2.0;
              var x = chr * (1.0 - $$Math.abs($$Math["%"](h$prime)(2.0) - 1.0));
              var rgb1 = (function () {
                  if (h$prime < 1.0) {
                      return {
                          r: chr, 
                          g: x, 
                          b: 0.0
                      };
                  };
                  if (1.0 <= h$prime && h$prime < 2.0) {
                      return {
                          r: x, 
                          g: chr, 
                          b: 0.0
                      };
                  };
                  if (2.0 <= h$prime && h$prime < 3.0) {
                      return {
                          r: 0.0, 
                          g: chr, 
                          b: x
                      };
                  };
                  if (3.0 <= h$prime && h$prime < 4.0) {
                      return {
                          r: 0.0, 
                          g: x, 
                          b: chr
                      };
                  };
                  if (4.0 <= h$prime && h$prime < 5.0) {
                      return {
                          r: x, 
                          g: 0.0, 
                          b: chr
                      };
                  };
                  if (Prelude.otherwise) {
                      return {
                          r: chr, 
                          g: 0.0, 
                          b: x
                      };
                  };
                  throw new Error("Failed pattern match at Graphics.Drawing.Color line 49, column 1 - line 50, column 1: " + [  ]);
              })();
              return rgb(255.0 * (rgb1.r + m))(255.0 * (rgb1.g + m))(255.0 * (rgb1.b + m));
          };
      };
  };                               
  var gray = rgb(128.0)(128.0)(128.0);
  var colorString = function (_2) {
      return "#" + ($foreign.byteToHex(_2.value0) + ($foreign.byteToHex(_2.value1) + $foreign.byteToHex(_2.value2)));
  };                              
  var black = rgb(0.0)(0.0)(0.0);
  exports["black"] = black;
  exports["gray"] = gray;
  exports["hsl"] = hsl;
  exports["rgb"] = rgb;
  exports["colorString"] = colorString;;
 
})(PS["Graphics.Drawing.Color"] = PS["Graphics.Drawing.Color"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var optionsString = function (_1) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([ Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(_1.style), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(_1.variant), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(_1.weight) ]);
  };
  var fontString = function (_0) {
      return optionsString(_0.value2) + (" " + (Prelude.show(Prelude.showInt)(_0.value1) + ("px " + _0.value0)));
  };
  exports["fontString"] = fontString;;
 
})(PS["Graphics.Drawing.Font"] = PS["Graphics.Drawing.Font"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Graphics_Drawing_Color = PS["Graphics.Drawing.Color"];
  var Graphics_Drawing_Font = PS["Graphics.Drawing.Font"];
  var Path = (function () {
      function Path(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Path.create = function (value0) {
          return function (value1) {
              return new Path(value0, value1);
          };
      };
      return Path;
  })();
  var Rectangle = (function () {
      function Rectangle(value0) {
          this.value0 = value0;
      };
      Rectangle.create = function (value0) {
          return new Rectangle(value0);
      };
      return Rectangle;
  })();
  var Circle = (function () {
      function Circle(value0) {
          this.value0 = value0;
      };
      Circle.create = function (value0) {
          return new Circle(value0);
      };
      return Circle;
  })();
  var Composite = (function () {
      function Composite(value0) {
          this.value0 = value0;
      };
      Composite.create = function (value0) {
          return new Composite(value0);
      };
      return Composite;
  })();
  var Fill = (function () {
      function Fill(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fill.create = function (value0) {
          return function (value1) {
              return new Fill(value0, value1);
          };
      };
      return Fill;
  })();
  var Outline = (function () {
      function Outline(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Outline.create = function (value0) {
          return function (value1) {
              return new Outline(value0, value1);
          };
      };
      return Outline;
  })();
  var Text = (function () {
      function Text(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Text.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Text(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Text;
  })();
  var Many = (function () {
      function Many(value0) {
          this.value0 = value0;
      };
      Many.create = function (value0) {
          return new Many(value0);
      };
      return Many;
  })();
  var Scale = (function () {
      function Scale(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Scale.create = function (value0) {
          return function (value1) {
              return new Scale(value0, value1);
          };
      };
      return Scale;
  })();
  var Translate = (function () {
      function Translate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Translate.create = function (value0) {
          return function (value1) {
              return new Translate(value0, value1);
          };
      };
      return Translate;
  })();
  var Rotate = (function () {
      function Rotate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rotate.create = function (value0) {
          return function (value1) {
              return new Rotate(value0, value1);
          };
      };
      return Rotate;
  })();
  var Clipped = (function () {
      function Clipped(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Clipped.create = function (value0) {
          return function (value1) {
              return new Clipped(value0, value1);
          };
      };
      return Clipped;
  })();
  var WithShadow = (function () {
      function WithShadow(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      WithShadow.create = function (value0) {
          return function (value1) {
              return new WithShadow(value0, value1);
          };
      };
      return WithShadow;
  })();
  var translate = function (tx) {
      return function (ty) {
          return Translate.create({
              translateX: tx, 
              translateY: ty
          });
      };
  };                     
  var shadowOffset = function (x) {
      return function (y) {
          return {
              color: Data_Maybe.Nothing.value, 
              blur: Data_Maybe.Nothing.value, 
              offset: new Data_Maybe.Just({
                  x: x, 
                  y: y
              })
          };
      };
  };
  var shadowColor = function (c) {
      return {
          color: new Data_Maybe.Just(c), 
          blur: Data_Maybe.Nothing.value, 
          offset: Data_Maybe.Nothing.value
      };
  };
  var shadow = WithShadow.create;
  var semigroupShadow = new Prelude.Semigroup(function (_18) {
      return function (_19) {
          return {
              color: Control_Alt["<|>"](Data_Maybe.altMaybe)(_18.color)(_19.color), 
              blur: Control_Alt["<|>"](Data_Maybe.altMaybe)(_18.blur)(_19.blur), 
              offset: Control_Alt["<|>"](Data_Maybe.altMaybe)(_18.offset)(_19.offset)
          };
      };
  });
  var semigroupOutlineStyle = new Prelude.Semigroup(function (_12) {
      return function (_13) {
          return {
              color: Control_Alt["<|>"](Data_Maybe.altMaybe)(_12.color)(_13.color), 
              lineWidth: Control_Alt["<|>"](Data_Maybe.altMaybe)(_12.lineWidth)(_13.lineWidth)
          };
      };
  });
  var scale = function (sx) {
      return function (sy) {
          return Scale.create({
              scaleX: sx, 
              scaleY: sy
          });
      };
  };
  var rotate = Rotate.create;
  var render = function (ctx) {
      var renderShape = function (_29) {
          if (_29 instanceof Path && _29.value1 instanceof Data_List.Nil) {
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
          };
          if (_29 instanceof Path && _29.value1 instanceof Data_List.Cons) {
              return function __do() {
                  Graphics_Canvas.moveTo(ctx)(_29.value1.value0.x)(_29.value1.value0.y)();
                  Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(_29.value1.value1)(function (p_1) {
                      return Graphics_Canvas.lineTo(ctx)(p_1.x)(p_1.y);
                  })();
                  return Control_Monad.when(Control_Monad_Eff.monadEff)(_29.value0)(Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.closePath(ctx)))();
              };
          };
          if (_29 instanceof Rectangle) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.rect(ctx)(_29.value0));
          };
          if (_29 instanceof Circle) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.arc(ctx)({
                  x: _29.value0.x, 
                  y: _29.value0.y, 
                  r: _29.value0.r, 
                  start: 0.0, 
                  end: $$Math.pi * 2.0
              }));
          };
          if (_29 instanceof Composite) {
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(_29.value0)(renderShape);
          };
          throw new Error("Failed pattern match at Graphics.Drawing line 261, column 1 - line 262, column 1: " + [ _29.constructor.name ]);
      };
      var applyShadow = function (_26) {
          return function __do() {
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_26.color)(function (color) {
                  return Graphics_Canvas.setShadowColor(Graphics_Drawing_Color.colorString(color))(ctx);
              })();
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_26.blur)(function (blur) {
                  return Graphics_Canvas.setShadowBlur(blur)(ctx);
              })();
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_26.offset)(function (offset) {
                  return function __do() {
                      Graphics_Canvas.setShadowOffsetX(offset.x)(ctx)();
                      return Graphics_Canvas.setShadowOffsetY(offset.y)(ctx)();
                  };
              })();
          };
      };
      var applyOutlineStyle = function (_28) {
          return function __do() {
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_28.color)(function (color) {
                  return Graphics_Canvas.setStrokeStyle(Graphics_Drawing_Color.colorString(color))(ctx);
              })();
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_28.lineWidth)(function (width) {
                  return Graphics_Canvas.setLineWidth(width)(ctx);
              })();
          };
      };
      var applyFillStyle = function (_27) {
          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_27.color)(function (color) {
              return Graphics_Canvas.setFillStyle(Graphics_Drawing_Color.colorString(color))(ctx);
          });
      };
      var go = function (_25) {
          if (_25 instanceof Fill) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyFillStyle(_25.value1)();
                  return Graphics_Canvas.fillPath(ctx)(renderShape(_25.value0))();
              }));
          };
          if (_25 instanceof Outline) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyOutlineStyle(_25.value1)();
                  return Graphics_Canvas.strokePath(ctx)(renderShape(_25.value0))();
              }));
          };
          if (_25 instanceof Many) {
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(_25.value0)(go);
          };
          if (_25 instanceof Scale) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.scale(_25.value0)(ctx)();
                  return go(_25.value1)();
              }));
          };
          if (_25 instanceof Translate) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.translate(_25.value0)(ctx)();
                  return go(_25.value1)();
              }));
          };
          if (_25 instanceof Rotate) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.rotate(_25.value0)(ctx)();
                  return go(_25.value1)();
              }));
          };
          if (_25 instanceof Clipped) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  renderShape(_25.value0)();
                  Graphics_Canvas.clip(ctx)();
                  return go(_25.value1)();
              }));
          };
          if (_25 instanceof WithShadow) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyShadow(_25.value0)();
                  return go(_25.value1)();
              }));
          };
          if (_25 instanceof Text) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.setFont(Graphics_Drawing_Font.fontString(_25.value0))(ctx)();
                  applyFillStyle(_25.value3)();
                  return Graphics_Canvas.fillText(ctx)(_25.value4)(_25.value1)(_25.value2)();
              }));
          };
          throw new Error("Failed pattern match at Graphics.Drawing line 261, column 1 - line 262, column 1: " + [ _25.constructor.name ]);
      };
      return go;
  };
  var rectangle = function (x) {
      return function (y) {
          return function (w) {
              return function (h) {
                  return new Rectangle({
                      x: x, 
                      y: y, 
                      w: w, 
                      h: h
                  });
              };
          };
      };
  };
  var path = function (__dict_Foldable_0) {
      return function (_150) {
          return Path.create(false)(Data_List.toList(__dict_Foldable_0)(_150));
      };
  };
  var outlined = Prelude.flip(Outline.create);
  var outlineColor = function (c) {
      return {
          color: new Data_Maybe.Just(c), 
          lineWidth: Data_Maybe.Nothing.value
      };
  };                                                     
  var lineWidth = function (c) {
      return {
          color: Data_Maybe.Nothing.value, 
          lineWidth: new Data_Maybe.Just(c)
      };
  };
  var filled = Prelude.flip(Fill.create);
  var fillColor = function (c) {
      return {
          color: new Data_Maybe.Just(c)
      };
  };                           
  var circle = function (x) {
      return function (y) {
          return function (r) {
              return new Circle({
                  x: x, 
                  y: y, 
                  r: r
              });
          };
      };
  };
  exports["render"] = render;
  exports["rotate"] = rotate;
  exports["translate"] = translate;
  exports["scale"] = scale;
  exports["outlined"] = outlined;
  exports["filled"] = filled;
  exports["shadow"] = shadow;
  exports["shadowColor"] = shadowColor;
  exports["shadowOffset"] = shadowOffset;
  exports["lineWidth"] = lineWidth;
  exports["outlineColor"] = outlineColor;
  exports["fillColor"] = fillColor;
  exports["circle"] = circle;
  exports["rectangle"] = rectangle;
  exports["path"] = path;
  exports["semigroupOutlineStyle"] = semigroupOutlineStyle;
  exports["semigroupShadow"] = semigroupShadow;;
 
})(PS["Graphics.Drawing"] = PS["Graphics.Drawing"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Maybe = PS["Data.Maybe"];
  var Graphics_Drawing = PS["Graphics.Drawing"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var DOM = PS["DOM"];
  var Signal_Channel = PS["Signal.Channel"];
  var Flare = PS["Flare"];     
  var runFlareDrawing = function (controls) {
      return function (canvasID) {
          return function (ui) {
              return function __do() {
                  var _3 = Graphics_Canvas.getCanvasElementById(canvasID)();
                  if (_3 instanceof Data_Maybe.Just) {
                      var _2 = Graphics_Canvas.getContext2D(_3.value0)();
                      var _1 = Graphics_Canvas.getCanvasWidth(_3.value0)();
                      var _0 = Graphics_Canvas.getCanvasHeight(_3.value0)();
                      return (function () {
                          var render$prime = function (drawing) {
                              return function __do() {
                                  Graphics_Canvas.clearRect(_2)({
                                      x: 0.0, 
                                      y: 0.0, 
                                      w: _1, 
                                      h: _0
                                  })();
                                  return Graphics_Drawing.render(_2)(drawing)();
                              };
                          };
                          return Flare.runFlareWith(controls)(render$prime)(ui);
                      })()();
                  };
                  throw new Error("Failed pattern match at Flare.Drawing line 25, column 1 - line 29, column 1: " + [ _3.constructor.name ]);
              };
          };
      };
  };
  exports["runFlareDrawing"] = runFlareDrawing;;
 
})(PS["Flare.Drawing"] = PS["Flare.Drawing"] || {});
(function(exports) {
      

  exports.animationFrameP =
    function animationFrameP(constant) {
      return function(now) {
        return function() {
          var requestAnimFrame, cancelAnimFrame;
          if (window.requestAnimationFrame) {
            requestAnimFrame = window.requestAnimationFrame;
            cancelAnimFrame = window.cancelAnimationFrame;
          } else if (window.mozRequestAnimationFrame) {
            requestAnimFrame = window.mozRequestAnimationFrame;
            cancelAnimFrame = window.mozCancelAnimationFrame;
          } else if (window.webkitRequestAnimationFrame) {
            requestAnimFrame = window.webkitRequestAnimationFrame;
            cancelAnimFrame = window.webkitCancelAnimationFrame;
          } else if (window.msRequestAnimationFrame) {
            requestAnimFrame = window.msRequestAnimationFrame;
            cancelAnimFrame = window.msCancelAnimationFrame;
          } else if (window.oRequestAnimationFrame) {
            requestAnimFrame = window.oRequestAnimationFrame;
            cancelAnimFrame = window.oCancelAnimationFrame;
          } else {
            requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
            cancelAnimFrame = window.clearTimeout;
          }
          var out = constant(now());
          requestAnimFrame(function tick(t) {
            out.set(t); requestAnimFrame(tick);
          });
          return out;
        };
      };
    };
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var Signal = PS["Signal"];
  exports["now"] = $foreign.now;;
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var DOM = PS["DOM"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];                   
  var animationFrame = $foreign.animationFrameP(Signal.constant)(Signal_Time.now);
  exports["animationFrame"] = animationFrame;;
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Graphics_Drawing = PS["Graphics.Drawing"];
  var Graphics_Drawing_Color = PS["Graphics.Drawing.Color"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Traversable = PS["Data.Traversable"];
  var $$Math = PS["Math"];
  var Signal_DOM = PS["Signal.DOM"];
  var Flare = PS["Flare"];
  var Flare_Drawing = PS["Flare.Drawing"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var English = (function () {
      function English() {

      };
      English.value = new English();
      return English;
  })();
  var French = (function () {
      function French() {

      };
      French.value = new French();
      return French;
  })();
  var German = (function () {
      function German() {

      };
      German.value = new German();
      return German;
  })();
  var showLanguage = new Prelude.Show(function (_1) {
      if (_1 instanceof English) {
          return "english";
      };
      if (_1 instanceof French) {
          return "french";
      };
      if (_1 instanceof German) {
          return "german";
      };
      throw new Error("Failed pattern match at Test.Main line 18, column 1 - line 23, column 1: " + [ _1.constructor.name ]);
  });
  var greet = function (_0) {
      if (_0 instanceof English) {
          return "Hello";
      };
      if (_0 instanceof French) {
          return "Salut";
      };
      if (_0 instanceof German) {
          return "Hallo";
      };
      throw new Error("Failed pattern match at Test.Main line 23, column 1 - line 24, column 1: " + [ _0.constructor.name ]);
  };
  var main = function __do() {
      Flare.runFlare(Prelude.showNumber)("controls1")("output1")(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)($$Math.pow)(Flare.number("Base")(2.0)))(Flare.number("Exponent")(10.0)))();
      Flare.runFlareS("controls2")("output2")(Prelude["<>"](Flare.semigroupUI(Prelude.semigroupString))(Flare.string_("Hello"))(Prelude["<>"](Flare.semigroupUI(Prelude.semigroupString))(Prelude.pure(Flare.applicativeUI)(" "))(Flare.string_("World"))))();
      Flare.runFlare(Prelude.showInt)("controls3")("output3")(Data_Foldable.sum(Data_Foldable.foldableArray)(Flare.semiringUI(Prelude.semiringInt))(Prelude["<$>"](Prelude.functorArray)(Flare.int_)([ 2, 13, 27, 42 ])))();
      Flare.runFlare(Prelude.showNumber)("controls4")("output4")(Prelude["/"](Flare.moduloSemiringUI(Prelude.moduloSemiringNumber))(Flare.number_(5.0))(Flare.number_(2.0)))();
      var coloredCircle = function (hue) {
          return function (radius) {
              return Graphics_Drawing.filled(Graphics_Drawing.fillColor(Graphics_Drawing_Color.hsl(hue)(0.8)(0.4)))(Graphics_Drawing.circle(50.0)(50.0)(radius));
          };
      };
      Flare_Drawing.runFlareDrawing("controls5")("output5")(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(coloredCircle)(Flare.numberSlider("Hue")(0.0)(360.0)(1.0)(140.0)))(Flare.numberSlider("Radius")(2.0)(45.0)(0.1)(25.0)))();
      Flare.runFlareS("controls6")("output6")(Prelude["<>"](Flare.semigroupUI(Prelude.semigroupString))(Prelude["<$>"](Flare.functorUI)(greet)(Flare.select(showLanguage)("Language")(English.value)([ French.value, German.value ])))(Prelude["<>"](Flare.semigroupUI(Prelude.semigroupString))(Prelude.pure(Flare.applicativeUI)(" "))(Prelude["<>"](Flare.semigroupUI(Prelude.semigroupString))(Flare.string("Name")("Pierre"))(Prelude.pure(Flare.applicativeUI)("!")))))();
      var animate = function (time) {
          return function (enabled) {
              var s = 50.0 + 25.0 * $$Math.cos(2.0e-3 * time);
              var w = 50.0 - s / 2.0;
              var rect = Graphics_Drawing.filled(Graphics_Drawing.fillColor(Graphics_Drawing_Color.gray))(Graphics_Drawing.rectangle(w)(w)(s)(s));
              var o = s / 10.0;
              var shaded = Graphics_Drawing.shadow(Prelude["<>"](Graphics_Drawing.semigroupShadow)(Graphics_Drawing.shadowColor(Graphics_Drawing_Color.black))(Graphics_Drawing.shadowOffset(o)(o)));
              if (enabled) {
                  return shaded(rect);
              };
              if (!enabled) {
                  return rect;
              };
              throw new Error("Failed pattern match at Test.Main line 53, column 7 - line 60, column 3: " + [ enabled.constructor.name ]);
          };
      };
      Flare_Drawing.runFlareDrawing("controls7")("output7")(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(animate)(Flare.lift(Signal_DOM.animationFrame)))(Flare["boolean"]("Shadow")(false)))();
      Flare.runFlare(Prelude.showArray(Prelude.showInt))("controls8")("output8")(Data_Traversable.traverse(Data_Traversable.traversableArray)(Flare.applicativeUI)(Flare.intSlider_(1)(5))(Data_Array[".."](1)(5)))();
      Flare.runFlare(Prelude.showBoolean)("controls9")("output9")(Prelude["&&"](Flare.booleanAlgebraUI(Prelude.booleanAlgebraBoolean))(Flare.boolean_(false))(Flare.boolean_(true)))();
      var graph = function (xs) {
          return function (width) {
              var point = function (x) {
                  return function (y) {
                      return {
                          x: x, 
                          y: Data_Int.toNumber(y)
                      };
                  };
              };
              var points = Data_Array.zipWith(point)(xs)(Data_Array[".."](1)(Data_Array.length(xs)));
              return Graphics_Drawing.outlined(Prelude["<>"](Graphics_Drawing.semigroupOutlineStyle)(Graphics_Drawing.outlineColor(Graphics_Drawing_Color.black))(Graphics_Drawing.lineWidth(width)))(Graphics_Drawing.path(Data_Foldable.foldableArray)(points));
          };
      };
      Flare_Drawing.runFlareDrawing("controls10")("output10")(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(graph)(Flare.foldp(Data_Array.cons)([  ])(Flare.numberSlider("Position")(0.0)(150.0)(1.0)(75.0))))(Flare.numberSlider("Width")(1.0)(5.0)(0.1)(1.0)))();
      var toInt = function (_2) {
          if (_2) {
              return 1;
          };
          if (!_2) {
              return 0;
          };
          throw new Error("Failed pattern match at Test.Main line 78, column 7 - line 79, column 7: " + [ _2.constructor.name ]);
      };
      return Flare.runFlare(Prelude.showInt)("controls11")("output11")(Flare.foldp(Prelude["+"](Prelude.semiringInt))(0)(Prelude["<$>"](Flare.functorUI)(toInt)(Flare.button("Increment"))))();
  };
  exports["English"] = English;
  exports["French"] = French;
  exports["German"] = German;
  exports["main"] = main;
  exports["greet"] = greet;
  exports["showLanguage"] = showLanguage;;
 
})(PS["Test.Main"] = PS["Test.Main"] || {});

PS["Test.Main"].main();
