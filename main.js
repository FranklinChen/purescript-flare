// Generated by psc-bundle 0.7.6.1
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Monoid ---------------------------------------------------------------------

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  //- Semiring -------------------------------------------------------------------

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };

  exports.showStringImpl = function (s) {
    return JSON.stringify(s);
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var ModuloSemiring = function (__superclass_Prelude$dotSemiring_0, div, mod) {
      this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
      this.div = div;
      this.mod = mod;
  };
  var Show = function (show) {
      this.show = show;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                           
  var unit = {};
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };             
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (__dict_Applicative_2) {
      return pure(__dict_Applicative_2);
  };                   
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  }; 
  var moduloSemiringNumber = new ModuloSemiring(function () {
      return semiringNumber;
  }, $foreign.numDiv, function (_14) {
      return function (_15) {
          return 0.0;
      };
  });                                  
  var mod = function (dict) {
      return dict.mod;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (__dict_Functor_5) {
      return map(__dict_Functor_5);
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  }; 
  var div = function (dict) {
      return dict.div;
  };
  var $div = function (__dict_ModuloSemiring_10) {
      return div(__dict_ModuloSemiring_10);
  };
  var $$const = function (a) {
      return function (_3) {
          return a;
      };
  };
  var $$void = function (__dict_Functor_12) {
      return function (fa) {
          return $less$dollar$greater(__dict_Functor_12)($$const(unit))(fa);
      };
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var $greater$greater$greater = function (__dict_Semigroupoid_15) {
      return flip(compose(__dict_Semigroupoid_15));
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var bind = function (dict) {
      return dict.bind;
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (__dict_Apply_25) {
      return apply(__dict_Apply_25);
  };
  var liftA1 = function (__dict_Applicative_26) {
      return function (f) {
          return function (a) {
              return $less$times$greater(__dict_Applicative_26["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_26)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (__dict_Semigroup_28) {
      return append(__dict_Semigroup_28);
  };
  var ap = function (__dict_Monad_30) {
      return function (f) {
          return function (a) {
              return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                  return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                      return $$return(__dict_Monad_30["__superclass_Prelude.Applicative_0"]())(_2(_1));
                  });
              });
          };
      };
  }; 
  var add = function (dict) {
      return dict.add;
  };
  var $plus = function (__dict_Semiring_31) {
      return add(__dict_Semiring_31);
  };
  exports["Show"] = Show;
  exports["ModuloSemiring"] = ModuloSemiring;
  exports["Semiring"] = Semiring;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["/"] = $div;
  exports["mod"] = mod;
  exports["div"] = div;
  exports["+"] = $plus;
  exports["one"] = one;
  exports["mul"] = mul;
  exports["zero"] = zero;
  exports["add"] = add;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["void"] = $$void;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports[">>>"] = $greater$greater$greater;
  exports["compose"] = compose;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorArray"] = functorArray;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
  exports["moduloSemiringNumber"] = moduloSemiringNumber;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showString"] = showString;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var $times$greater = function (__dict_Apply_1) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](__dict_Apply_1)(Prelude["<$>"](__dict_Apply_1["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (__dict_Apply_5) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return Prelude["<*>"](__dict_Apply_5)(Prelude["<$>"](__dict_Apply_5["__superclass_Prelude.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["lift2"] = lift2;
  exports["*>"] = $times$greater;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];     
  var when = function (__dict_Monad_0) {
      return function (_0) {
          return function (m) {
              if (_0) {
                  return m;
              };
              if (!_0) {
                  return Prelude["return"](__dict_Monad_0["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
              };
              throw new Error("Failed pattern match at Control.Monad line 8, column 1 - line 9, column 1: " + [ _0.constructor.name, m.constructor.name ]);
          };
      };
  };
  exports["when"] = when;;
 
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];     
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };               
  var monoidString = new Monoid(function () {
      return Prelude.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (__dict_Applicative_0) {
      return function (__dict_Foldable_1) {
          return function (f) {
              return foldr(__dict_Foldable_1)(function (_97) {
                  return Control_Apply["*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]())(f(_97));
              })(Prelude.pure(__dict_Applicative_0)(Prelude.unit));
          };
      };
  };
  var for_ = function (__dict_Applicative_2) {
      return function (__dict_Foldable_3) {
          return Prelude.flip(traverse_(__dict_Applicative_2)(__dict_Foldable_3));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (__dict_Foldable_6) {
      return function (__dict_Monoid_7) {
          return function (sep) {
              return function (xs) {
                  var go = function (_24) {
                      return function (x) {
                          if (_24.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(_24.acc)(Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(__dict_Foldable_6)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(__dict_Monoid_7)
                  })(xs)).acc;
              };
          };
      };
  };
  var sum = function (__dict_Foldable_12) {
      return function (__dict_Semiring_13) {
          return foldl(__dict_Foldable_12)(Prelude["+"](__dict_Semiring_13))(Prelude.zero(__dict_Semiring_13));
      };
  }; 
  var foldableMaybe = new Foldable(function (__dict_Monoid_15) {
      return function (f) {
          return function (_2) {
              if (_2 instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(__dict_Monoid_15);
              };
              if (_2 instanceof Data_Maybe.Just) {
                  return f(_2.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 99, column 1 - line 107, column 1: " + [ f.constructor.name, _2.constructor.name ]);
          };
      };
  }, function (f) {
      return function (z) {
          return function (_1) {
              if (_1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (_1 instanceof Data_Maybe.Just) {
                  return f(z)(_1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 99, column 1 - line 107, column 1: " + [ f.constructor.name, z.constructor.name, _1.constructor.name ]);
          };
      };
  }, function (f) {
      return function (z) {
          return function (_0) {
              if (_0 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (_0 instanceof Data_Maybe.Just) {
                  return f(_0.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 99, column 1 - line 107, column 1: " + [ f.constructor.name, z.constructor.name, _0.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (__dict_Foldable_20) {
      return function (__dict_Monoid_21) {
          return function (f) {
              return function (xs) {
                  return foldr(__dict_Foldable_20)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](__dict_Monoid_21["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(__dict_Monoid_21))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (__dict_Monoid_22) {
      return foldMapDefaultR(foldableArray)(__dict_Monoid_22);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (__dict_Foldable_29) {
      return function (__dict_Monoid_30) {
          return foldMap(__dict_Foldable_29)(__dict_Monoid_30)(Prelude.id(Prelude.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["sum"] = sum;
  exports["intercalate"] = intercalate;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["fold"] = fold;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_16) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function (_319) {
                  return Prelude.append(__dict_Monoid_16["__superclass_Prelude.Semigroup_0"]())(acc)(f(_319));
              };
          })(Data_Monoid.mempty(__dict_Monoid_16));
      };
  }, (function () {
      var go = function (__copy_o) {
          return function (__copy_b) {
              return function (__copy__66) {
                  var o = __copy_o;
                  var b = __copy_b;
                  var _66 = __copy__66;
                  tco: while (true) {
                      var b_1 = b;
                      if (_66 instanceof Nil) {
                          return b_1;
                      };
                      if (_66 instanceof Cons) {
                          var __tco_o = o;
                          var __tco_b = o(b)(_66.value0);
                          var __tco__66 = _66.value1;
                          o = __tco_o;
                          b = __tco_b;
                          _66 = __tco__66;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _66.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (o) {
      return function (b) {
          return function (_65) {
              if (_65 instanceof Nil) {
                  return b;
              };
              if (_65 instanceof Cons) {
                  return o(_65.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_65.value1));
              };
              throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _65.constructor.name ]);
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["foldableList"] = foldableList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // module Flare
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.renderString = function(target) {
    return function(content) {
      return function() {
        document.getElementById(target).innerHTML = content;
      };
    };
  };

  exports.appendComponent = function(target) {
    return function(el) {
      return function() {
        document.getElementById(target).appendChild(el);
      };
    };
  };

  function createComponent(inputType, elementCallback, eventType, eventListener) {
    return function(id) {
      return function(initial) {
        return function(send) {
          return function() {
            var el = elementCallback(initial);
            el.id = id;
            el.className = "flare-input-" + inputType;

            var label = document.createElement("label");
            label.htmlFor = id;
            label.appendChild(document.createTextNode(id));

            var div = document.createElement("div");
            div.className = "flare-input";
            div.appendChild(label);
            div.appendChild(el);

            el.addEventListener(eventType, function(e) {
              var value = eventListener(e.target, initial);
              send(value)();
            });

            return div;
          };
        };
      };
    };
  }

  exports.cNumber = createComponent("number",
    function(initial) {
      var input = document.createElement("input");
      input.type = "number";
      input.step = "any";
      input.value = initial.toString();
      return input;
    },
    "input",
    function(t, initial) {
      var val = parseFloat(t.value);
      return (isNaN(val) ? initial : val);
    }
  );

  exports.cInt = createComponent("int",
    function(initial) {
      var input = document.createElement("input");
      input.type = "number";
      input.step = "1";
      input.value = initial.toString();
      return input;
    },
    "input",
    function(t, initial) {
      var val = parseInt(t.value);
      return (isNaN(val) ? initial : val);
    }
  );

  exports.cString = createComponent("string",
    function(initial) {
      var input = document.createElement("input");
      input.type = "text";
      input.value = initial;
      return input;
    },
    "input",
    function(t, initial) {
      return t.value;
    }
  );

  exports.cSelect = function(showX) {
    return function(xs) {
      return createComponent("select",
        function(initial) {
          var select = document.createElement("select");

          var x, op;
          for (var i = 0; i < xs.length + 1; i++) {
            x = (i === 0) ? initial : xs[i - 1];
            op = document.createElement("option");
            op.appendChild(document.createTextNode(showX.show(x)));
            select.appendChild(op);
          }

          return select;
        },
        "change",
        function(t, initial) {
          var ix = t.selectedIndex;
          if (ix === 0) {
            return initial;
          }
          return xs[ix - 1];
        }
      );
    };
  };

  // vim: ts=2:sw=2
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };


  exports.applySigP =
    function applySigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun.get()(sig.get()));
          var produce = function() { out.set(fun.get()(sig.get())); };
          fun.subscribe(produce);
          sig.subscribe(produce);
          return out;
        };
      };
    };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];     
  var $tilde$greater = function (__dict_Functor_0) {
      return Prelude.flip(Prelude["<$>"](__dict_Functor_0));
  };                                                 
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var applySig = $foreign.applySigP($foreign.constant);
  var applySignal = new Prelude.Apply(function () {
      return functorSignal;
  }, applySig);
  var applicativeSignal = new Prelude.Applicative(function () {
      return applySignal;
  }, $foreign.constant);
  exports["~>"] = $tilde$greater;
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["applicativeSignal"] = applicativeSignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan, v) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];     
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["send"] = send;
  exports["channel"] = channel;
  exports["subscribe"] = $foreign.subscribe;;
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Flare"];
  var Prelude = PS["Prelude"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];     
  var Flare = (function () {
      function Flare(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Flare.create = function (value0) {
          return function (value1) {
              return new Flare(value0, value1);
          };
      };
      return Flare;
  })();
  var UI = function (x) {
      return x;
  };
  var select = function (__dict_Show_2) {
      return function (id) {
          return function (x) {
              return function (xs) {
                  return UI(function __do() {
                      var _6 = Signal_Channel.channel(x)();
                      var _5 = $foreign.cSelect(__dict_Show_2)(xs)(id)(x)(Signal_Channel.send(_6))();
                      return (function () {
                          var signal = Signal_Channel.subscribe(_6);
                          return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare([ _5 ], signal));
                      })()();
                  });
              };
          };
      };
  };
  var functorUI = new Prelude.Functor(function (f) {
      return function (_9) {
          return UI(function __do() {
              var _0 = _9();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare(_0.value0, Prelude.map(Signal.functorSignal)(f)(_0.value1)))();
          });
      };
  });
  var createUI = function (createComp) {
      return function (id) {
          return function ($$default) {
              return UI(function __do() {
                  var _4 = Signal_Channel.channel($$default)();
                  var _3 = createComp(id)($$default)(Signal_Channel.send(_4))();
                  return (function () {
                      var signal = Signal_Channel.subscribe(_4);
                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare([ _3 ], signal));
                  })()();
              });
          };
      };
  };
  var $$int = createUI($foreign.cInt);
  var int_ = $$int("");
  var number = createUI($foreign.cNumber);
  var number_ = number("");
  var string = createUI($foreign.cString);
  var string_ = string("");    
  var applyUI = new Prelude.Apply(function () {
      return functorUI;
  }, function (_10) {
      return function (_11) {
          return UI(function __do() {
              var _2 = _10();
              var _1 = _11();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare(Prelude["<>"](Prelude.semigroupArray)(_2.value0)(_1.value0), Prelude.apply(Signal.applySignal)(_2.value1)(_1.value1)))();
          });
      };
  });
  var semigroupUI = function (__dict_Semigroup_1) {
      return new Prelude.Semigroup(Control_Apply.lift2(applyUI)(Prelude.append(__dict_Semigroup_1)));
  };
  var applicativeUI = new Prelude.Applicative(function () {
      return applyUI;
  }, function (x) {
      return UI(Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare([  ], Prelude.pure(Signal.applicativeSignal)(x))));
  });
  var semiringUI = function (__dict_Semiring_0) {
      return new Prelude.Semiring(Control_Apply.lift2(applyUI)(Prelude.add(__dict_Semiring_0)), Control_Apply.lift2(applyUI)(Prelude.mul(__dict_Semiring_0)), Prelude.pure(applicativeUI)(Prelude.one(__dict_Semiring_0)), Prelude.pure(applicativeUI)(Prelude.zero(__dict_Semiring_0)));
  };
  var moduloSemiringUI = function (__dict_ModuloSemiring_7) {
      return new Prelude.ModuloSemiring(function () {
          return semiringUI(__dict_ModuloSemiring_7["__superclass_Prelude.Semiring_0"]());
      }, Control_Apply.lift2(applyUI)(Prelude.div(__dict_ModuloSemiring_7)), Control_Apply.lift2(applyUI)(Prelude.mod(__dict_ModuloSemiring_7)));
  };
  var appendComponents = function (_35) {
      return Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)($foreign.appendComponent(_35));
  };
  var runFlare = function (__dict_Show_9) {
      return function (controls) {
          return function (target) {
              return function (_8) {
                  return function __do() {
                      var _7 = _8();
                      appendComponents(controls)(_7.value0)();
                      return Signal.runSignal(Signal["~>"](Signal.functorSignal)(_7.value1)(Prelude[">>>"](Prelude.semigroupoidFn)(Prelude.show(__dict_Show_9))($foreign.renderString(target))))();
                  };
              };
          };
      };
  };
  exports["UI"] = UI;
  exports["Flare"] = Flare;
  exports["runFlare"] = runFlare;
  exports["appendComponents"] = appendComponents;
  exports["select"] = select;
  exports["string_"] = string_;
  exports["string"] = string;
  exports["int_"] = int_;
  exports["number_"] = number_;
  exports["number"] = number;
  exports["functorUI"] = functorUI;
  exports["applyUI"] = applyUI;
  exports["applicativeUI"] = applicativeUI;
  exports["semigroupUI"] = semigroupUI;
  exports["semiringUI"] = semiringUI;
  exports["moduloSemiringUI"] = moduloSemiringUI;;
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };                           

  exports.pi = Math.PI;      
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Math"];
  exports["pi"] = $foreign.pi;
  exports["pow"] = $foreign.pow;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setLineWidth = function(width) {
      return function(ctx) {
          return function() {
              ctx.lineWidth = width;
              return ctx;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.setShadowColor = function(color) {
      return function(ctx) {
          return function() {
              ctx.shadowColor = color;
              return ctx;
          };
      };
  };

  exports.setShadowBlur = function(blur) {
      return function(ctx) {
          return function() {
              ctx.shadowBlur = blur;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetX = function(offsetX) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetX = offsetX;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetY = function(offsetY) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetY = offsetY;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.clip = function(ctx) {
      return function() {
          ctx.clip();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.scale = function(t) {
      return function(ctx) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
              return ctx;
          };
      };
  };

  exports.rotate = function(angle) {
      return function(ctx) {
          return function() {
              ctx.rotate(angle);
              return ctx;
          };
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };

 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              $foreign.save(ctx)();
              var _4 = action();
              $foreign.restore(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(_4)();
          };
      };
  };
  var strokePath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var _2 = path();
              $foreign.stroke(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(_2)();
          };
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var _3 = path();
              $foreign.fill(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(_3)();
          };
      };
  };
  exports["withContext"] = withContext;
  exports["fillPath"] = fillPath;
  exports["strokePath"] = strokePath;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["fillText"] = $foreign.fillText;
  exports["setFont"] = $foreign.setFont;
  exports["translate"] = $foreign.translate;
  exports["rotate"] = $foreign.rotate;
  exports["scale"] = $foreign.scale;
  exports["clearRect"] = $foreign.clearRect;
  exports["rect"] = $foreign.rect;
  exports["arc"] = $foreign.arc;
  exports["closePath"] = $foreign.closePath;
  exports["moveTo"] = $foreign.moveTo;
  exports["lineTo"] = $foreign.lineTo;
  exports["clip"] = $foreign.clip;
  exports["setShadowColor"] = $foreign.setShadowColor;
  exports["setShadowOffsetY"] = $foreign.setShadowOffsetY;
  exports["setShadowOffsetX"] = $foreign.setShadowOffsetX;
  exports["setShadowBlur"] = $foreign.setShadowBlur;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["getContext2D"] = $foreign.getContext2D;;
 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  "use strict";

  // module Graphics.Drawing.Color

  exports.byteToHex = function(n) {
    
      var s = (n = Math.min(255, Math.max(n, 0)) | 0).toString(16);
      return n >= 16 ? s : "0" + s;
  };
})(PS["Graphics.Drawing.Color"] = PS["Graphics.Drawing.Color"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Graphics.Drawing.Color"];
  var Prelude = PS["Prelude"];
  var $$Math = PS["Math"];     
  var Color = (function () {
      function Color(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Color.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Color(value0, value1, value2);
              };
          };
      };
      return Color;
  })();
  var rgb = Color.create;             
  var red = rgb(255.0)(0.0)(0.0);
  var colorString = function (_2) {
      return "#" + ($foreign.byteToHex(_2.value0) + ($foreign.byteToHex(_2.value1) + $foreign.byteToHex(_2.value2)));
  };
  exports["red"] = red;
  exports["rgb"] = rgb;
  exports["colorString"] = colorString;;
 
})(PS["Graphics.Drawing.Color"] = PS["Graphics.Drawing.Color"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var optionsString = function (_1) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([ Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(_1.style), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(_1.variant), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(_1.weight) ]);
  };
  var fontString = function (_0) {
      return optionsString(_0.value2) + (" " + (Prelude.show(Prelude.showInt)(_0.value1) + ("px " + _0.value0)));
  };
  exports["fontString"] = fontString;;
 
})(PS["Graphics.Drawing.Font"] = PS["Graphics.Drawing.Font"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Graphics_Drawing_Color = PS["Graphics.Drawing.Color"];
  var Graphics_Drawing_Font = PS["Graphics.Drawing.Font"];
  var Path = (function () {
      function Path(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Path.create = function (value0) {
          return function (value1) {
              return new Path(value0, value1);
          };
      };
      return Path;
  })();
  var Rectangle = (function () {
      function Rectangle(value0) {
          this.value0 = value0;
      };
      Rectangle.create = function (value0) {
          return new Rectangle(value0);
      };
      return Rectangle;
  })();
  var Circle = (function () {
      function Circle(value0) {
          this.value0 = value0;
      };
      Circle.create = function (value0) {
          return new Circle(value0);
      };
      return Circle;
  })();
  var Composite = (function () {
      function Composite(value0) {
          this.value0 = value0;
      };
      Composite.create = function (value0) {
          return new Composite(value0);
      };
      return Composite;
  })();
  var Fill = (function () {
      function Fill(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fill.create = function (value0) {
          return function (value1) {
              return new Fill(value0, value1);
          };
      };
      return Fill;
  })();
  var Outline = (function () {
      function Outline(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Outline.create = function (value0) {
          return function (value1) {
              return new Outline(value0, value1);
          };
      };
      return Outline;
  })();
  var Text = (function () {
      function Text(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Text.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Text(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Text;
  })();
  var Many = (function () {
      function Many(value0) {
          this.value0 = value0;
      };
      Many.create = function (value0) {
          return new Many(value0);
      };
      return Many;
  })();
  var Scale = (function () {
      function Scale(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Scale.create = function (value0) {
          return function (value1) {
              return new Scale(value0, value1);
          };
      };
      return Scale;
  })();
  var Translate = (function () {
      function Translate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Translate.create = function (value0) {
          return function (value1) {
              return new Translate(value0, value1);
          };
      };
      return Translate;
  })();
  var Rotate = (function () {
      function Rotate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rotate.create = function (value0) {
          return function (value1) {
              return new Rotate(value0, value1);
          };
      };
      return Rotate;
  })();
  var Clipped = (function () {
      function Clipped(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Clipped.create = function (value0) {
          return function (value1) {
              return new Clipped(value0, value1);
          };
      };
      return Clipped;
  })();
  var WithShadow = (function () {
      function WithShadow(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      WithShadow.create = function (value0) {
          return function (value1) {
              return new WithShadow(value0, value1);
          };
      };
      return WithShadow;
  })();
  var translate = function (tx) {
      return function (ty) {
          return Translate.create({
              translateX: tx, 
              translateY: ty
          });
      };
  }; 
  var scale = function (sx) {
      return function (sy) {
          return Scale.create({
              scaleX: sx, 
              scaleY: sy
          });
      };
  };
  var rotate = Rotate.create;
  var render = function (ctx) {
      var renderShape = function (_29) {
          if (_29 instanceof Path && _29.value1 instanceof Data_List.Nil) {
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
          };
          if (_29 instanceof Path && _29.value1 instanceof Data_List.Cons) {
              return function __do() {
                  Graphics_Canvas.moveTo(ctx)(_29.value1.value0.x)(_29.value1.value0.y)();
                  Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(_29.value1.value1)(function (p_1) {
                      return Graphics_Canvas.lineTo(ctx)(p_1.x)(p_1.y);
                  })();
                  return Control_Monad.when(Control_Monad_Eff.monadEff)(_29.value0)(Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.closePath(ctx)))();
              };
          };
          if (_29 instanceof Rectangle) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.rect(ctx)(_29.value0));
          };
          if (_29 instanceof Circle) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.arc(ctx)({
                  x: _29.value0.x, 
                  y: _29.value0.y, 
                  r: _29.value0.r, 
                  start: 0.0, 
                  end: $$Math.pi * 2.0
              }));
          };
          if (_29 instanceof Composite) {
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(_29.value0)(renderShape);
          };
          throw new Error("Failed pattern match at Graphics.Drawing line 261, column 1 - line 262, column 1: " + [ _29.constructor.name ]);
      };
      var applyShadow = function (_26) {
          return function __do() {
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_26.color)(function (color) {
                  return Graphics_Canvas.setShadowColor(Graphics_Drawing_Color.colorString(color))(ctx);
              })();
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_26.blur)(function (blur) {
                  return Graphics_Canvas.setShadowBlur(blur)(ctx);
              })();
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_26.offset)(function (offset) {
                  return function __do() {
                      Graphics_Canvas.setShadowOffsetX(offset.x)(ctx)();
                      return Graphics_Canvas.setShadowOffsetY(offset.y)(ctx)();
                  };
              })();
          };
      };
      var applyOutlineStyle = function (_28) {
          return function __do() {
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_28.color)(function (color) {
                  return Graphics_Canvas.setStrokeStyle(Graphics_Drawing_Color.colorString(color))(ctx);
              })();
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_28.lineWidth)(function (width) {
                  return Graphics_Canvas.setLineWidth(width)(ctx);
              })();
          };
      };
      var applyFillStyle = function (_27) {
          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_27.color)(function (color) {
              return Graphics_Canvas.setFillStyle(Graphics_Drawing_Color.colorString(color))(ctx);
          });
      };
      var go = function (_25) {
          if (_25 instanceof Fill) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyFillStyle(_25.value1)();
                  return Graphics_Canvas.fillPath(ctx)(renderShape(_25.value0))();
              }));
          };
          if (_25 instanceof Outline) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyOutlineStyle(_25.value1)();
                  return Graphics_Canvas.strokePath(ctx)(renderShape(_25.value0))();
              }));
          };
          if (_25 instanceof Many) {
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(_25.value0)(go);
          };
          if (_25 instanceof Scale) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.scale(_25.value0)(ctx)();
                  return go(_25.value1)();
              }));
          };
          if (_25 instanceof Translate) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.translate(_25.value0)(ctx)();
                  return go(_25.value1)();
              }));
          };
          if (_25 instanceof Rotate) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.rotate(_25.value0)(ctx)();
                  return go(_25.value1)();
              }));
          };
          if (_25 instanceof Clipped) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  renderShape(_25.value0)();
                  Graphics_Canvas.clip(ctx)();
                  return go(_25.value1)();
              }));
          };
          if (_25 instanceof WithShadow) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyShadow(_25.value0)();
                  return go(_25.value1)();
              }));
          };
          if (_25 instanceof Text) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.setFont(Graphics_Drawing_Font.fontString(_25.value0))(ctx)();
                  applyFillStyle(_25.value3)();
                  return Graphics_Canvas.fillText(ctx)(_25.value4)(_25.value1)(_25.value2)();
              }));
          };
          throw new Error("Failed pattern match at Graphics.Drawing line 261, column 1 - line 262, column 1: " + [ _25.constructor.name ]);
      };
      return go;
  };                                                     
  var lineWidth = function (c) {
      return {
          color: Data_Maybe.Nothing.value, 
          lineWidth: new Data_Maybe.Just(c)
      };
  };
  var filled = Prelude.flip(Fill.create);
  var fillColor = function (c) {
      return {
          color: new Data_Maybe.Just(c)
      };
  };                           
  var circle = function (x) {
      return function (y) {
          return function (r) {
              return new Circle({
                  x: x, 
                  y: y, 
                  r: r
              });
          };
      };
  };
  exports["render"] = render;
  exports["rotate"] = rotate;
  exports["translate"] = translate;
  exports["scale"] = scale;
  exports["filled"] = filled;
  exports["lineWidth"] = lineWidth;
  exports["fillColor"] = fillColor;
  exports["circle"] = circle;;
 
})(PS["Graphics.Drawing"] = PS["Graphics.Drawing"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Maybe = PS["Data.Maybe"];
  var Graphics_Drawing = PS["Graphics.Drawing"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var DOM = PS["DOM"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];
  var Flare = PS["Flare"];     
  var runFlareDrawing = function (controls) {
      return function (canvasID) {
          return function (_5) {
              return function __do() {
                  var _4 = _5();
                  Flare.appendComponents(controls)(_4.value0)();
                  var _3 = Graphics_Canvas.getCanvasElementById(canvasID)();
                  if (_3 instanceof Data_Maybe.Just) {
                      var _2 = Graphics_Canvas.getContext2D(_3.value0)();
                      var _1 = Graphics_Canvas.getCanvasWidth(_3.value0)();
                      var _0 = Graphics_Canvas.getCanvasHeight(_3.value0)();
                      return (function () {
                          var render$prime = function (drawing) {
                              return function __do() {
                                  Graphics_Canvas.clearRect(_2)({
                                      x: 0.0, 
                                      y: 0.0, 
                                      w: _1, 
                                      h: _0
                                  })();
                                  return Graphics_Drawing.render(_2)(drawing)();
                              };
                          };
                          return Signal.runSignal(Signal["~>"](Signal.functorSignal)(_4.value1)(render$prime));
                      })()();
                  };
                  throw new Error("Failed pattern match at Flare.Drawing line 26, column 1 - line 30, column 1: " + [ _3.constructor.name ]);
              };
          };
      };
  };
  exports["runFlareDrawing"] = runFlareDrawing;;
 
})(PS["Flare.Drawing"] = PS["Flare.Drawing"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Graphics_Drawing = PS["Graphics.Drawing"];
  var Graphics_Drawing_Color = PS["Graphics.Drawing.Color"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var $$Math = PS["Math"];
  var Flare = PS["Flare"];
  var Flare_Drawing = PS["Flare.Drawing"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var English = (function () {
      function English() {

      };
      English.value = new English();
      return English;
  })();
  var French = (function () {
      function French() {

      };
      French.value = new French();
      return French;
  })();
  var German = (function () {
      function German() {

      };
      German.value = new German();
      return German;
  })();
  var showLanguage = new Prelude.Show(function (_1) {
      if (_1 instanceof English) {
          return "english";
      };
      if (_1 instanceof French) {
          return "french";
      };
      if (_1 instanceof German) {
          return "german";
      };
      throw new Error("Failed pattern match at Test.Main line 14, column 1 - line 19, column 1: " + [ _1.constructor.name ]);
  });
  var greet = function (_0) {
      if (_0 instanceof English) {
          return "Hello";
      };
      if (_0 instanceof French) {
          return "Salut";
      };
      if (_0 instanceof German) {
          return "Hallo";
      };
      throw new Error("Failed pattern match at Test.Main line 19, column 1 - line 20, column 1: " + [ _0.constructor.name ]);
  };
  var main = function __do() {
      Flare.runFlare(Prelude.showNumber)("controls1")("output1")(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)($$Math.pow)(Flare.number("Base")(2.0)))(Flare.number("Exponent")(10.0)))();
      Flare.runFlare(Prelude.showString)("controls2")("output2")(Prelude["<>"](Flare.semigroupUI(Prelude.semigroupString))(Flare.string_("Hello"))(Prelude["<>"](Flare.semigroupUI(Prelude.semigroupString))(Prelude.pure(Flare.applicativeUI)(" "))(Flare.string_("World"))))();
      Flare.runFlare(Prelude.showInt)("controls3")("output3")(Data_Foldable.sum(Data_Foldable.foldableArray)(Flare.semiringUI(Prelude.semiringInt))(Prelude["<$>"](Prelude.functorArray)(Flare.int_)([ 2, 13, 27, 42 ])))();
      Flare.runFlare(Prelude.showNumber)("controls4")("output4")(Prelude["/"](Flare.moduloSemiringUI(Prelude.moduloSemiringNumber))(Flare.number_(5.0))(Flare.number_(2.0)))();
      Flare_Drawing.runFlareDrawing("controls5")("output5")(Prelude["<$>"](Flare.functorUI)(Graphics_Drawing.filled(Graphics_Drawing.fillColor(Graphics_Drawing_Color.red)))(Prelude["<$>"](Flare.functorUI)(Graphics_Drawing.circle(50.0)(50.0))(Flare.number("Radius")(25.0))))();
      return Flare.runFlare(Prelude.showString)("controls6")("output6")(Prelude["<>"](Flare.semigroupUI(Prelude.semigroupString))(Prelude["<$>"](Flare.functorUI)(greet)(Flare.select(showLanguage)("Language")(English.value)([ French.value, German.value ])))(Prelude["<>"](Flare.semigroupUI(Prelude.semigroupString))(Prelude.pure(Flare.applicativeUI)(" "))(Prelude["<>"](Flare.semigroupUI(Prelude.semigroupString))(Flare.string("Name")("Pierre"))(Prelude.pure(Flare.applicativeUI)("!")))))();
  };
  exports["English"] = English;
  exports["French"] = French;
  exports["German"] = German;
  exports["main"] = main;
  exports["greet"] = greet;
  exports["showLanguage"] = showLanguage;;
 
})(PS["Test.Main"] = PS["Test.Main"] || {});

PS["Test.Main"].main();